諦めたコードたち

setlist edit


@app.route('/setlist-edit/<id>')
def setlist_edit(id: str) -> str:
    con = get_db()
    cur = con.cursor()

    concert = cur.execute('SELECT * FROM concerts WHERE id = ?', (id,)).fetchone()

    performances = cur.execute(
        'SELECT p.number_of_order, s.title AS song_title, a.name AS artist_name '
        'FROM performances p '
        'JOIN songs s ON s.id = p.song_id '
        'JOIN artists_performances ap ON ap.concert_id = p.concert_id AND ap.order_in_concert = p.number_of_order '
        'JOIN artists a ON a.id = ap.artist_id '
        'WHERE p.concert_id = ? '
        , (id,)).fetchall()

    # 編集対象の CD 情報をテンプレートへ渡してレンダリングしたものを返す
    return render_template('setlist-edit.html', concert=concert, performances=performances)

@app.route('/setlist-edit/<id>', methods=['POST'])
def setlist_edit_update(id: str) -> Response:
    # データベース接続してカーソルを得る
    con = get_db()
    cur = con.cursor()

    # リクエストされた POST パラメータの内容を取り出す
    concert_id = id
    number_of_order = request.form['number_of_order']
    new_song_title = request.form['new_song_title']
    song_title = request.form['song_title']
    new_artist_name = request.form['new_artist_name']
    artist_name = request.form['artist_name']

    # 変更がない場合編集画面にそのまま戻る
    if song_title == new_song_title and artist_name == new_artist_name:
        return redirect(url_for('setlist_edit_results', code='unchanged'))
    # 楽曲に変更があった場合
    if song_title != new_song_title:
        new_song = cur.execute('SELECT id FROM songs WHERE title = ?',
                            (new_song_title,)).fetchone()
        if new_song is None:
            # 指定された楽曲IDの行が無い
            return redirect(url_for('setlist_edit_results',
                                    code='song-does-not-exist'))

        try:
            # performances テーブルの指定された行のパラメータを更新
            cur.execute(
            'UPDATE performances '
            'SET song_id = ?'
            'WHERE concert_id = ? AND number_of_order = ? '
            , (new_song['id'], concert_id, number_of_order))

        except sqlite3.Error:
                return redirect(url_for('setlist_edit_results',
                                        code='database-error'))
            # return render_template('index.html')

    # アーティストに変更があった場合
    if artist_name != new_artist_name:
        # アーティストIDの存在チェックをする：
        # artists テーブルで同じアーティストIDの行を 1 行だけ取り出す
        new_artist = cur.execute('SELECT id FROM artists WHERE name = ?',
                            (new_artist_name,)).fetchone()
        if artist is None:
            # 指定されたアーティストIDの行が無い
            return redirect(url_for('setlist_edit_results',
                                    code='artist-does-not-exist'))

        # 変更したいアーティスト名のアーティストIDを取得
        artist = cur.execute('SELECT id FROM artists WHERE name = ?',
                            (artist_name,)).fetchone()

        try:
            # tracks テーブルの指定された行のパラメータを更新
            cur.execute(
            'UPDATE artists_performances '
            'SET artist_id = ? '
            'WHERE concert_id = ? AND order_in_concert = ? AND artist_id = ?'
            , (new_artist['id'], concert_id, order_in_concert, artist['id']))

        except sqlite3.Error:
            return redirect(url_for('setlist_edit_results',
                            code='database-error'))
            # return render_template('index.html')

    con.commit()
    # 編集が終了したらトラック編集ページに戻る

    concert = cur.execute('SELECT * FROM concerts WHERE id = ?', (concert_id,)).fetchone()

    performances = cur.execute(
        'SELECT p.number_of_order, s.title AS song_title, a.name AS artist_name '
        'FROM performances p '
        'JOIN songs s ON s.id = p.song_id '
        'JOIN artists_performances ap ON ap.concert_id = p.concert_id AND ap.order_in_concert = p.number_of_order '
        'JOIN artists a ON a.id = ap.artist_id '
        'WHERE p.concert_id = ? '
        , (concert_id,)).fetchall()

    # 編集対象の CD 情報をテンプレートへ渡してレンダリングしたものを返す
    return render_template('setlist-edit.html', concert=concert, performances=performances)

@app.route('/setlist-edit-results/<code>')
def setlist_edit_results(code: str) -> str:
    return render_template('setlist-edit-results.html',
                           results=RESULT_MESSAGES.get(code, 'code error'))
